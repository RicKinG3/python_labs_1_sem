# -*- coding: utf-8 -*-
#                   Требуется написать 9 независимых программ:
# 1. Даны массивы D и F. Сформировать матрицу A по формуле  ajk = sin(dj+fk).
# Определить среднее арифметическое положительных чисел каждой строки
# матрицы и количество элементов, меньших среднего арифметического.
# Результаты записать соответственно в массивы AV и L. Напечатать матрицу A в
# виде матрицы и рядом столбцы AV и L.
# 2. Найти максимальное значение над главной диагональю и минимальное - под
# побочной диагональю.
# 3. Транспонирование квадратной матрицы.
# 4. Поворот квадратной матрицы на 90 градусов по часовой стрелке, затем на 90
# градусов против часовой стрелки. Вывести промежуточную и итоговую матрицу.
# 5. Подсчитать в каждой строке матрицы D количество элементов, превышающих
# суммы элементов соответствующих строк матрицы Z. Разместить эти
# количества в массиве G, умножить матрицу D на максимальный элемент
# массива G. Напечатать матрицу D до и после преобразования, а также массив G
# 6. Задана матрица D и массив I, содержащий номера строк, для которых
# необходимо определить максимальный элемент. Значения максимальных
# элементов запомнить в массиве R. Определить среднее арифметическое
# вычисленных максимальных значений. Напечатать матрицу D, массивы I и R,
# среднее арифметическое значение.
# 7. Дана матрица символов. Заменить в ней все гласные английские буквы на
# точки.
# 8. Сформировать матрицу C путём построчного перемножения матриц A и B
# одинаковой размерности (элементы в i-й строке матрицы A умножаются на
# соответствующие элементы в i-й строке матрицы B), потом сложить все
# элементы в столбцах матрицы C и записать их в массив V.
# 9. Ввести трёхмерный массив (массив матриц размера X*Y*Z), вывести из него i-й
# срез по второму индексу.
#
# Выполнил: Вольняга Максим ИУ7-16Б
#
from math import sin
from check import *

D = []
F = []
a = []


# Функция ввода и проверки массива D
def add_mas_D(D):
    n = checker(input('Введите кол-во эл D: '))
    n = int(n)
    D.clear()
    for i in range(n):
        inp = input(f'Ввведите {i + 1} элемент массива: ')
        chec = inp
        if check_num_float(chec):
            D.append(inp)
        else:
            print('Массив D должен быть численным, введите его заново')
            add_mas_D(D)
            break
    return D


# Функция ввода и проверки массива F
def add_mas_F(F):
    n = checker(input('Введите кол-во эл F: '))
    n = int(n)
    F.clear()
    for i in range(n):
        inp = input(f'Ввведите {i + 1} элемент массива: ')
        chec = inp
        if check_num_float(chec):
            F.append(inp)
        else:
            print('Массив F должен быть численным, введите его заново')
            add_mas_F(F)
            break
    return F


# функция для сформирования матрицы
def add_matrix_a(a):
    a.clear()
    add_mas_D(D)
    add_mas_F(F)
    D_int = list(map(float, D))
    F_int = list(map(float, F))
    for j in range(len(D)):
        a.append([])
        for k in range(len(F)):
            a[j].append(sin(D_int[j] + F_int[k]))
    return a


add_matrix_a(a)
if (len(F) or len(D)) == 0:
    add_matrix_a(a)
if len(a) == 0:  # Проверка на наличия строк
    print('Вы ввели нулевую матрицу, заполните заново')
    add_matrix_a(a)

AV = []  # Список хранит среднее арифметическое всех строк
L = []

for i in range(len(a)):
    summa = 0
    counter = 0
    k = 0
    if len(a) > 0:  # Проверка на наличия строк
        for j in range(len(a[i])):
            if a[i][j] > 0:  # если эл больше нуля то сумируем и увеличиваем count
                summa += a[i][j]
                counter += 1
        if counter > 0:  # Проверка на наличие эл больших нуля
            AV.append(summa / counter)
        else:
            AV.append('-')

for i in range(len(a)):
    k = 0
    l = 0
    for j in range(len(a[i])):
        if AV[i] == '-':
            L.append('-')
            l+=1
        elif (float(AV[i]) > float(a[i][j])):
            k += 1
    if l==0:
        L.append(k)
    print(L)

for i in range(len(AV)):
    print(f'среднее арифметическое {i + 1} - строки =  ', '{:<10}'.format(AV[i]),
          '/// Кол-во элементов меньших ср. ариф. = ', '{:1}'.format(L[i]))


# Функция вывода матрицы
def matrix_print(a):
    print('\n')
    print("Ваша матрица:")
    for i in range(len(a)):
        for j in range(len(a[i])):
            print("{:<6,.5g}".format(a[i][j]), end=' ')
        print('          ', '{:<5}'.format(AV[i]), '     ', '{:<1}'.format(L[i]))


matrix_print(a)
